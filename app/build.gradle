apply plugin: 'com.android.application'

ext.languages = ["de", "es", "fa", "fr", "it", "ja", "pl", "ru", "zh-rCN", "zh-rTW"]
ext.supportLibraryVersion = "25.3.1"
ext.c_languages = ["", "es-ES", "fa", "fr", "it", "ja", "pl", "ru", "zh-CN", "zh-TW"]
ext.crowdinKey = null

android {
    signingConfigs {
        main
    }
    compileSdkVersion 25
    buildToolsVersion '25.0.2'
    defaultConfig {
        applicationId "de.Maxr1998.xposed.maxlock"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 45
        versionName "6.4.1"
        resConfigs languages
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //noinspection GroovyAssignabilityCheck
            signingConfig signingConfigs.main
        }
        debug {
            debuggable true
            versionNameSuffix "-beta"
            //noinspection GroovyAssignabilityCheck
            signingConfig signingConfigs.main
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }
}

def propFile = project.file("keyStore.properties")
if (propFile.exists()) {
    def props = new Properties()
    props.load(new FileInputStream(propFile))
    android.signingConfigs.main.storeFile project.file(props.keyStore)
    android.signingConfigs.main.storePassword props.keyStorePassword
    android.signingConfigs.main.keyAlias props.keyAlias
    android.signingConfigs.main.keyPassword props.keyPassword
    ext.crowdinKey = props.crowdinKey
}

repositories {
    jcenter()
    maven {
        url "https://jitpack.io"
    }
    flatDir {
        dirs 'libs'
    }
}
dependencies {
    // From JCenter or other repositories
    //-- 3rd-party
    compile 'com.anjlab.android.iab.v3:library:1.0.38@aar'
    compile 'com.github.attenzione:android-ColorPickerPreference:e3aa301016'
    compile 'com.github.shkschneider:android_PreferenceFragmentCompat:1.0.0@aar'
    compile 'com.google.guava:guava:21.0'
    compile 'com.heinrichreimersoftware:material-intro:1.6'
    compile 'com.simplecityapps:recyclerview-fastscroll:1.0.5'
    compile 'com.twofortyfouram:android-plugin-api-for-locale:1.0.2'
    compile 'commons-io:commons-io:2.4'
    provided 'de.robv.android.xposed:api:81'
    provided 'de.robv.android.xposed:api:81:sources'
    //-- Android support and Google Services
    compile "com.android.support:appcompat-v7:$supportLibraryVersion"
    compile "com.android.support:customtabs:$supportLibraryVersion"
    compile "com.android.support:design:$supportLibraryVersion"
    compile "com.android.support:gridlayout-v7:$supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$supportLibraryVersion"
    /* includes all other support-v4 libraries */
    compile "com.android.support:support-fragment:$supportLibraryVersion"
    compile 'com.google.android.gms:play-services-base:10.2.1'
    compile 'com.google.android.gms:play-services-analytics:10.2.1'
    // Local files
    compile(name: 'PatternLock', ext: 'aar')
}

task updateTranslations() << {
    if (crowdinKey == null)
        return
    for (int i = 0; i < c_languages.size(); i++) {
        String c_lang = c_languages[i]
        if (c_lang == "")
            continue
        String lang = languages[i]
        String file = "\$PWD/src/main/res/values-$lang/strings.xml"
        exec {
            executable "bash"
            args "-c", "wget -O \"$file\" \"https://api.crowdin.com/api/project/MaxLock/export-file?file=strings.xml&language=$c_lang&key=$crowdinKey\""
        }
    }
}